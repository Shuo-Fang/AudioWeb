<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.audioweb.quartz.mapper.SysJobMapper">

	<resultMap type="WorkSchemeTask" id="WorkSchemeTaskResult">
		<id     property="schemeTaskId"   column="scheme_task_id"  />
		<result property="jobId"          column="job_id"          />
		<result property="jobName"        column="job_name"        />
		<result property="jobGroup"       column="job_group"       />
		<result property="invokeTarget"   column="invoke_target"   />
		<result property="cronExpression" column="cron_expression" />
		<result property="misfirePolicy"  column="misfire_policy"  />
		<result property="concurrent"     column="concurrent"      />
		<result property="status"         column="status"          />
		<result property="createBy"       column="create_by"       />
		<result property="createTime"     column="create_time"     />
		<result property="updateBy"       column="update_by"       />
		<result property="updateTime"     column="update_time"     />
		<result property="remark"         column="remark"          />
		<association property="workScheme"    column="scheme_id" javaType="WorkScheme" resultMap="workSchemeResult" />
	</resultMap>

	<resultMap id="workSchemeResult" type="WorkScheme">
		<id     property="schemeId"   column="scheme_id"     />
		<id     property="schemeName"   column="scheme_name"     />
		<id     property="status"   column="scheme_status"     />
		<id     property="schemePriority"   column="scheme_priority"     />
	</resultMap>

	<sql id="selectWorkSchemeTaskVo">
        select j.job_id, j.job_name, j.job_group, j.invoke_target, j.cron_expression, j.misfire_policy, j.concurrent, j.status, j.create_by, j.create_time,j.start_time, j.end_time, j.remark ,
         t.scheme_task_id, t.song_data, t.task_cast_type, t.task_domain_ids, t.task_ter_ids, t.task_timing, t.task_vol,
         s.scheme_id, s.scheme_name, s.status as scheme_status, s.scheme_priority
		from sys_job j left join work_scheme_task t on j.job_id = w.job_id and j.del_flag = '0' left join work_scheme s on j.job_group = s.scheme_id and s.del_flag = '0'
    </sql>

	<select id="selectWorkSchemeTaskList" parameterType="WorkSchemeTask" resultMap="WorkSchemeTaskResult">
		<include refid="selectWorkSchemeTaskVo"/>
		<where>
			<if test="jobName != null and jobName != ''">
				AND job_name like concat('%', #{jobName}, '%')
			</if>
			<if test="jobGroup != null and jobGroup != ''">
				AND job_group = #{jobGroup}
			</if>
			<if test="status != null and status != ''">
				AND status = #{status}
			</if>
			<if test="invokeTarget != null and invokeTarget != ''">
				AND invoke_target like concat('%', #{invokeTarget}, '%')
			</if>
			<if test="params.beginTime != null and params.beginTime != ''"><!-- 开始时间检索 -->
				AND date_format(start_time,'%y%m%d') &gt;= date_format(#{params.beginTime},'%y%m%d')
			</if>
			<if test="params.endTime != null and params.endTime != ''"><!-- 结束时间检索 -->
				AND date_format(end_time,'%y%m%d') &lt;= date_format(#{params.endTime},'%y%m%d')
			</if>
		</where>
	</select>

	<select id="selectWorkSchemeTaskById" parameterType="Long" resultMap="WorkSchemeTaskResult">
		<include refid="selectWorkSchemeTaskVo"/>
		where scheme_task_id = #{schemeTaskId}
	</select>

	<insert id="insertWorkSchemeTask" parameterType="WorkSchemeTask" useGeneratedKeys="true" keyProperty="schemeTaskId">
		insert into work_scheme_task
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="jobId != null ">job_id,</if>
			<if test="schemeId != null ">scheme_id,</if>
			<if test="taskName != null  and taskName != ''">task_name,</if>
			<if test="taskTiming != null ">task_timing,</if>
			<if test="songData != null  and songData != ''">song_data,</if>
			<if test="taskVol != null ">task_vol,</if>
			<if test="taskDomainIds != null  and taskDomainIds != ''">task_domain_ids,</if>
			<if test="taskTerIds != null  and taskTerIds != ''">task_ter_ids,</if>
			<if test="taskCastType != null  and taskCastType != ''">task_cast_type,</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="jobId != null ">#{jobId},</if>
			<if test="schemeId != null ">#{schemeId},</if>
			<if test="taskName != null  and taskName != ''">#{taskName},</if>
			<if test="taskTiming != null ">#{taskTiming},</if>
			<if test="songData != null  and songData != ''">#{songData},</if>
			<if test="taskVol != null ">#{taskVol},</if>
			<if test="taskDomainIds != null  and taskDomainIds != ''">#{taskDomainIds},</if>
			<if test="taskTerIds != null  and taskTerIds != ''">#{taskTerIds},</if>
			<if test="taskCastType != null  and taskCastType != ''">#{taskCastType},</if>
		</trim>
	</insert>

	<update id="updateWorkSchemeTask" parameterType="WorkSchemeTask">
		update work_scheme_task
		<trim prefix="SET" suffixOverrides=",">
			<if test="jobId != null ">job_id = #{jobId},</if>
			<if test="schemeId != null ">scheme_id = #{schemeId},</if>
			<if test="taskName != null  and taskName != ''">task_name = #{taskName},</if>
			<if test="taskTiming != null ">task_timing = #{taskTiming},</if>
			<if test="songData != null  and songData != ''">song_data = #{songData},</if>
			<if test="taskVol != null ">task_vol = #{taskVol},</if>
			<if test="taskDomainIds != null  and taskDomainIds != ''">task_domain_ids = #{taskDomainIds},</if>
			<if test="taskTerIds != null  and taskTerIds != ''">task_ter_ids = #{taskTerIds},</if>
			<if test="taskCastType != null  and taskCastType != ''">task_cast_type = #{taskCastType},</if>
		</trim>
		where scheme_task_id = #{schemeTaskId}
	</update>

	<delete id="deleteWorkSchemeTaskById" parameterType="Long">
        delete from work_scheme_task where scheme_task_id = #{schemeTaskId}
    </delete>

	<delete id="deleteWorkSchemeTaskByIds" parameterType="String">
		delete from work_scheme_task where scheme_task_id in
		<foreach item="schemeTaskId" collection="array" open="(" separator="," close=")">
			#{schemeTaskId}
		</foreach>
	</delete>

	<select id="selectJobList" parameterType="SysJob" resultMap="SysJobResult">
		<include refid="selectJobVo"/>
		<where>
			del_flag = '0'
			<if test="jobName != null and jobName != ''">
				AND job_name like concat('%', #{jobName}, '%')
			</if>
			<if test="jobGroup != null and jobGroup != ''">
				AND job_group = #{jobGroup}
			</if>
			<if test="jobGroup == null or jobGroup == ''">
				AND job_group REGEXP '[^0-9]'
			</if>
			<if test="status != null and status != ''">
				AND status = #{status}
			</if>
			<if test="invokeTarget != null and invokeTarget != ''">
				AND invoke_target like concat('%', #{invokeTarget}, '%')
			</if>
		</where>
	</select>
	
	<select id="selectJobAll" resultMap="SysJobResult">
		<include refid="selectJobVo"/> WHERE del_flag = '0'
	</select>
	
	<select id="selectJobById" parameterType="Long" resultMap="SysJobResult">
		<include refid="selectJobVo"/>
		where del_flag = '0' AND job_id = #{jobId}
	</select>
	
	<delete id="deleteJobById" parameterType="Long">
 		update sys_job set del_flag = '2' where job_id = #{jobId}
 	</delete>
 	
 	<delete id="deleteJobByIds" parameterType="Long">
		update sys_job set del_flag = '2'  where job_id in
 		<foreach collection="array" item="jobId" open="(" separator="," close=")">
 			#{jobId}
        </foreach> 
 	</delete>
 	
 	<update id="updateJob" parameterType="SysJob">
 		update sys_job
 		<set>
 			<if test="jobName != null and jobName != ''">job_name = #{jobName},</if>
 			<if test="jobGroup != null and jobGroup != ''">job_group = #{jobGroup},</if>
 			<if test="invokeTarget != null and invokeTarget != ''">invoke_target = #{invokeTarget},</if>
 			<if test="cronExpression != null and cronExpression != ''">cron_expression = #{cronExpression},</if>
 			<if test="misfirePolicy != null and misfirePolicy != ''">misfire_policy = #{misfirePolicy},</if>
 			<if test="concurrent != null and concurrent != ''">concurrent = #{concurrent},</if>
 			<if test="status !=null">status = #{status},</if>
 			<if test="remark != null and remark != ''">remark = #{remark},</if>
 			<if test="updateBy != null and updateBy != ''">update_by = #{updateBy},</if>
 			update_time = sysdate()
 		</set>
 		where job_id = #{jobId}
	</update>
 	
 	<insert id="insertJob" parameterType="SysJob" useGeneratedKeys="true" keyProperty="jobId">
 		insert into sys_job(
 			<if test="jobId != null and jobId != 0">job_id,</if>
 			<if test="jobName != null and jobName != ''">job_name,</if>
 			<if test="jobGroup != null and jobGroup != ''">job_group,</if>
 			<if test="invokeTarget != null and invokeTarget != ''">invoke_target,</if>
 			<if test="cronExpression != null and cronExpression != ''">cron_expression,</if>
 			<if test="misfirePolicy != null and misfirePolicy != ''">misfire_policy,</if>
 			<if test="concurrent != null and concurrent != ''">concurrent,</if>
 			<if test="status != null and status != ''">status,</if>
 			<if test="remark != null and remark != ''">remark,</if>
 			<if test="createBy != null and createBy != ''">create_by,</if>
 			create_time
 		)values(
 			<if test="jobId != null and jobId != 0">#{jobId},</if>
 			<if test="jobName != null and jobName != ''">#{jobName},</if>
 			<if test="jobGroup != null and jobGroup != ''">#{jobGroup},</if>
 			<if test="invokeTarget != null and invokeTarget != ''">#{invokeTarget},</if>
 			<if test="cronExpression != null and cronExpression != ''">#{cronExpression},</if>
 			<if test="misfirePolicy != null and misfirePolicy != ''">#{misfirePolicy},</if>
 			<if test="concurrent != null and concurrent != ''">#{concurrent},</if>
 			<if test="status != null and status != ''">#{status},</if>
 			<if test="remark != null and remark != ''">#{remark},</if>
 			<if test="createBy != null and createBy != ''">#{createBy},</if>
 			sysdate()
 		)
	</insert>

</mapper> 